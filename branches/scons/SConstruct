# SCons script for librascal.
# vim: ts=4 sts=4 sw=4 et nocindent syntax=python
# $Id$

import os
import re
import fae

# Library version number.
current_version = '1.0'
# API version number.
api_version = '1.0'

Help("""
Usage: scons [options]

The following options are available:

    debug=yes        : include debug symbols and output.
    samples=yes    : build sample programs, too.
    instdir=path : override the deployment destination.

Send your comments to Justin Forest <justin.forest@gmail.com>
""")

# Build options.
opts = Options('config.options')
opts.Add(BoolOption('debug', 'Set to include debug symbols and output', False))
opts.Add(BoolOption('samples', 'Set to build sample programs', False))
opts.Add(EnumOption('build_tool', 'Override the build tool (for maintainers mostly)', 'default', allowed_values = ('default', 'mingw'), ignorecase = 1))
opts.Add(PathOption('instdir', 'Deployment destination', '/usr/local'))

# The default environment.
env = Environment(options = opts)
env.Append(CPPDEFINES = [('VERSION', current_version)])

# Autoconfigure.
if not env.GetOption('clean'):
    conf = Configure(env)
    if not conf.CheckFunc('strlcpy'):
        conf.env.Append(CPPDEFINES = 'strlcpy=strlcpy_local')
    if conf.CheckFunc('getopt'):
        conf.env.Append(CPPDEFINES = 'HAVE_getopt')
    if conf.CheckFunc('res_init'):
        conf.env.Append(CPPDEFINES = 'HAVE_res_init')
    conf.CheckLib('resolv')
    if env['PLATFORM'] == 'win32':
        conf.env.Append(CPPDEFINES = 'WIN32_LEAN_AND_MEAN')
        # Windows specific.
        if not conf.CheckLib('ws2_32'):
            print 'The winsock2 library is not available (very unusual).'
            Exit(1)
        if not conf.CheckLib('mswsock'):
            print 'The mswsock library is required (usually available on nt).'
            Exit(1)
        if not conf.CheckLib('iphlpapi'):
            print 'The iphlpapi library is required (usually available on nt).'
            Exit(1)
        conf.CheckLib('user32')
        if conf.CheckFunc('CryptGenRandom'):
            conf.env.Append(CPPDEFINES = 'HAVE_CryptGenRandom')
        if not conf.CheckLib(['pthread', 'pthreadGC2', 'pthreadGC', 'pthreadVC']):
            print 'You must have the pthread library installed.'
            Exit(1)
        if not conf.CheckFunc('snprintf'):
            if conf.CheckFunc('_snprintf'):
                conf.env.Append(CPPDEFINES = 'snprintf=_snprintf')
            else:
                print 'The snprintf() function is not avaialble (very unusual).'
                Exit(1)
        if not conf.CheckFunc('vsnprintf'):
            if conf.CheckFunc('_vsnprintf'):
                conf.env.Append(CPPDEFINES = 'vsnprintf=_vsnprintf')
            else:
                print 'The vsnprintf() function is not avaialble (very unusual).'
                Exit(1)
    else:
        # POSIX specific.
        if not conf.CheckLib('pthread'):
            print 'You must have the pthread library installed.'
            Exit(1)
    if env['debug'] == 1:
        if conf.CheckLib('flog'):
            conf.env.Append(CPPDEFINES = 'HAVE_flog')
    if not conf.CheckCHeader('pthread.h'):
        print 'You must have the pthread library properly installed.'
        Exit(1)
    env = conf.Finish()

# Choose the platform.
if Platform() == 'win32':
    env['LIBARCH'] = 'nt'
else:
    env['LIBARCH'] = 'bsd'

# Build the core library.
core = fae.SharedLibrary(env, 'rascal',
    ['sources/core/common', 'sources/core/' + env['LIBARCH']],
    r'^.*\.cc$', CPPDEFINES = 'BUILD_RASCAL')
