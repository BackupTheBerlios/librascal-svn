# SCons script for librascal.
# $Id$
# vim:ts=2:sts=2:sw=2:noet:nocindent:syntax=python

import os
import re

# A function to list files in a directory.
def listFilesW(at, r):
	for location in at:
		for file in os.listdir(location):
			fname = os.path.join(location, file)
			if os.path.isfile(fname):
				if r.match(file):
					yield fname
			elif os.path.isdir(fname):
				if not fname == '.svn':
					for more in listFilesW([fname], r):
						yield more

def listFiles(at, r):
	l = list(listFilesW(at, r))
	l.sort()
	return l

# Version number.
version = '1.0'

# The directory in which built files are stored.
output_dir = 'build'

# The default environment.
env = Environment()
env.Append(CPPDEFINES = [('VERSION', version)])

# Check the system configuration if we're not cleaning up.
if env.GetOption('clean'):
	print 'Skipping autoconfiguration due to a clean-up.'
else:
	conf = Configure(env)
	if not conf.CheckFunc('strlcpy'):
		print 'Could not find strlcpy(), using local version.'
		conf.env.Append('-Dstrlcpy=strlcpy_local')
	if not conf.CheckLib('pthread'):
		print 'You must have the pthread library installed.'
		Exit(1)
	env = conf.Finish()

# Special flags for building sample programs.
senv = env.Copy(CPPPATH = ['sources', 'sources/common/util'], CPPDEFINES = ['RASCAL_HELPERS', ('funs', 'rsample')], LIBS = 'rascal', LIBPATH = output_dir)

# Source files.
srcUtil = listFiles(['sources/common/util'], re.compile(r'^.*(\.cc)$'))

# Platform-dependent code.
if env['PLATFORM'] == 'win32':
	srcLib = listFiles(['sources/common', 'sources/nt'], re.compile(r'^.*(\.cc)$'))
else:
	srcLib = listFiles(['sources/common', 'sources/bsd'], re.compile(r'^.*(\.cc)$'))

# Build the main library.
env.SharedLibrary(os.path.join(output_dir, 'rascal'), srcLib, CCFLAGS = '-DBUILD_RASCAL')

# Build the samples.
senv.Program(os.path.join(output_dir, 'raconn'), srcUtil + ['sources/samples/01-raconn/raconn.cc'])

# Build a source tarball.
Environment(TARFLAGS = '-c -z').Tar('librascal-' + version + '-src.tar.gz', listFiles(['.'], re.compile(r'^(LICENSE|SConstruct|.*\.(cc|h|rc|docbook|dtd|css))$')))
