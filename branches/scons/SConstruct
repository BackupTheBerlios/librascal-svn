# SCons script for librascal.
# $Id$
# vim:ts=2:sts=2:sw=2:noet:nocindent:syntax=python

import re

# A function to list files in a directory.
def listFiles(at, r):
	import os
	for location in at:
		for file in os.listdir(location):
			fname = os.path.join(location, file)
			if os.path.isfile(fname):
				if r.match(file):
					yield fname
			elif os.path.isdir(fname):
				if not fname == '.svn':
					for more in listFiles([fname], r):
						yield more

# Version number.
version = '1.0'

# The directory in which built files are stored.
output_dir = 'librascal-' + version

# Check the system configuration.
env = Environment()
conf = Configure(env)
if not conf.CheckFunc('strlcpy'):
	print 'Could not find strlcpy(), using local version.'
	conf.env.Append('-Dstrlcpy=strlcpy_local')
if not conf.CheckLib('pthread'):
	Exit(1)
env = conf.Finish()

# Special flags for building sample programs.
senv = env.Copy(CPPPATH = ['sources', 'sources/common/util'], CPPDEFINES = ['RASCAL_HELPERS', ('funs', 'rsample')], LIBS = 'rascal', LIBPATH = output_dir)

# Source files.
srcUtil = list(listFiles(['sources/common/util'], re.compile(r'^.*(\.cc)$')))
srcCommon = list(listFiles(['sources/common'], re.compile(r'^.*(\.cc)$')))
srcBSD = list(listFiles(['sources/bsd'], re.compile(r'^.*(\.cc)$')))
srcNT = list(listFiles(['sources/nt'], re.compile(r'^.*(\.cc|\.rc)$')))
srcPlist = list(listFiles(['.'], re.compile(r'^(LICENSE|SConstruct|.*\.(cc|h|rc|docbook|dtd|css))$')))

# Platform-dependent code.
if env['PLATFORM'] == 'win32':
	srcLib = srcCommon + srcNT
else:
	srcLib = srcCommon + srcBSD

# Build the main library.
lib = env.SharedLibrary(output_dir + '/rascal', srcLib, CCFLAGS = '-DBUILD_RASCAL')

# Build the samples.
sample01 = senv.Program(output_dir + '/raconn', srcUtil + ['sources/samples/01-raconn/raconn.cc'])

# Build a source tarball.
Environment(TARFLAGS = '-c -z').Tar('librascal-' + version + '-src.tar.gz', srcPlist)
