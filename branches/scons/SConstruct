# SCons script for librascal.
# $Id$
# vim:ts=2:sts=2:sw=2:noet:nocindent:syntax=python

import os
import re

# A function to list files in a directory.
def listFilesW(at, r):
	nodes = []
	for location in at:
		for file in os.listdir(location):
			fname = os.path.join(location, file)
			if os.path.isfile(fname):
				if r.match(file):
					nodes.append(fname)
			elif os.path.isdir(fname):
				if not fname == '.svn':
					for more in listFilesW([fname], r):
						nodes.append(more)
	return nodes

def listFiles(at, r):
	l = listFilesW(at, r)
	l.sort()
	return l

# Version number.
version = '1.0'

Help("""
Usage: scons [options]

The following options are available:

  debug=1   : include debug symbols and output.
""")

# The directory in which built files are stored.
output_dir = 'build'

# The default environment.
env = Environment()
if env['PLATFORM'] == 'win32':
	env = Environment(tools = ['mingw'])
env.Append(CPPDEFINES = [('VERSION', version), 'RASCAL_HELPERS', ('funs', 'rsample')], CPPPATH = ['sources', 'sources/common/util'], LIBPATH = output_dir)

# Check the system configuration if we're not cleaning up.
if env.GetOption('clean'):
	print 'Skipping autoconfiguration due to a clean-up.'
else:
	print 'Configuring for platform: ' + env['PLATFORM'] + '.'
	conf = Configure(env)
	if not conf.CheckFunc('strlcpy'):
		print 'Could not find strlcpy(), using local version.'
		conf.env.Append(CPPDEFINES = 'strlcpy=strlcpy_local')
	if env['PLATFORM'] == 'win32':
		# Windows specific.
		if not conf.CheckLib('ws2_32'):
			print 'The winsock-2 library is not available (very unusual).'
			Exit(1)
		if not conf.CheckLib('mswsock'):
			print 'The mswsock library is required (usually available on nt).'
			Exit(1)
		if not conf.CheckLib('iphlpapi'):
			print 'The iphlpapi library is required (usually available on nt).'
			Exit(1)
		if not conf.CheckLib(['pthread', 'pthreadGC', 'pthreadVC']):
			print 'You must have the pthread library installed.'
			Exit(1)
	else:
		# POSIX specific.
		if not conf.CheckLib('pthread'):
			print 'You must have the pthread library installed.'
			Exit(1)
	if not conf.CheckCHeader('pthread.h'):
		print 'You must have the pthread library properly installed.'
		Exit(1)
	env = conf.Finish()

Export('env')

# Platform-dependent code.
if env['PLATFORM'] == 'win32':
	SConscript(os.path.join('sources', 'nt', 'SConscript'))
else:
	SConscript(os.path.join('sources', 'bsd', 'SConscript'))

# Build the samples.
SConscript(os.path.join('sources', 'samples', 'SConscript'))

if env['PLATFORM'] != 'win32':
	# Build a source tarball.
	Environment(TARFLAGS = '-c -z').Tar('librascal-' + version + '-src.tar.gz', listFiles(['.'], re.compile(r'^(LICENSE|SConstruct|.*\.(cc|h|rc|docbook|dtd|css))$')))
