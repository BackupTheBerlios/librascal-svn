# SCons script for librascal.
# $Id$
# vim:ts=2:sts=2:sw=2:noet:nocindent:syntax=python

import os
import re

class Finder:
  # A function to list files in a directory.
  def listFilesW(self, at, r):
    nodes = []
    for location in at:
      for file in os.listdir(location):
        fname = os.path.join(location, file)
        if os.path.isfile(fname):
          if r.match(file):
            nodes.append(fname)
        elif os.path.isdir(fname):
          if not fname == '.svn':
            for more in self.listFilesW([fname], r):
              nodes.append(more)
    return nodes
  
  def listFiles(self, at, r):
    l = self.listFilesW(at, re.compile(r))
    l.sort()
    return l

# Version number.
version = '1.0'

Help("""
Usage: scons [options]

The following options are available:

  debug=1   : include debug symbols and output.
""")

# The directory in which built files are stored.
output_dir = 'build'

fnd = Finder()

# Build options.
opts = Options('config.options')
opts.Add(
	BoolOption('DEBUG', 'Set to include debug symbols and output', 0),
	BoolOption('SAMPLES', 'Set to build sample programs', 0)
	)

# The default environment.
env = Environment(options = opts, tools = ['mingw'])
env.Append(CPPDEFINES = [('VERSION', version), 'RASCAL_HELPERS', ('funs', 'rsample')], LIBPATH = output_dir)

# Check the system configuration if we're not cleaning up.
if env.GetOption('clean'):
	print 'Skipping autoconfiguration due to a clean-up.'
else:
	print 'Configuring for platform: ' + env['PLATFORM'] + '.'
	conf = Configure(env)
	if not conf.CheckFunc('strlcpy'):
		print 'Could not find strlcpy(), using local version.'
		conf.env.Append(CPPDEFINES = 'strlcpy=strlcpy_local')
	if env['PLATFORM'] == 'win32':
		conf.env.Append(CPPDEFINES = 'WIN32_LEAN_AND_MEAN')
		# Windows specific.
		if not conf.CheckLib('ws2_32'):
			print 'The winsock2 library is not available (very unusual).'
			Exit(1)
		if not conf.CheckLib('mswsock'):
			print 'The mswsock library is required (usually available on nt).'
			Exit(1)
		if not conf.CheckLib('iphlpapi'):
			print 'The iphlpapi library is required (usually available on nt).'
			Exit(1)
		conf.CheckLib('user32')
		if not conf.CheckLib(['pthread', 'pthreadGC', 'pthreadVC']):
			print 'You must have the pthread library installed.'
			Exit(1)
		if not conf.CheckFunc('snprintf'):
			if conf.CheckFunc('_snprintf'):
				conf.env.Append(CPPDEFINES = 'snprintf=_snprintf')
		if conf.CheckFunc('getopt'):
			conf.env.Append(CPPDEFINES = 'HAVE_getopt')
	else:
		# POSIX specific.
		if not conf.CheckLib('pthread'):
			print 'You must have the pthread library installed.'
			Exit(1)
	if env['DEBUG'] == 1:
		if conf.CheckLib('flog'):
			conf.env.Append(CPPDEFINES = 'HAVE_flog')
	if not conf.CheckCHeader('pthread.h'):
		print 'You must have the pthread library properly installed.'
		Exit(1)
	env = conf.Finish()

# Platform-dependent code.
if env['PLATFORM'] == 'win32':
	env['LIBARCH'] = 'nt'
else:
	env['LIBARCH'] = 'bsd'

# Adapt to a debug build.
if env['DEBUG'] == 1:
	print '*** DEBUG BUILD ***'
	env.Append(CPPDEFINES = '_DEBUG')
	env.Append(CCFLAGS = '-g -O0')

opts.Save('config.options', env)
Export('env', 'fnd')

# Build the library.
SConscript(os.path.join('sources', env['LIBARCH'], 'SConscript'))

# Build the samples.
SConscript('sources/samples/SConscript')

if env['PLATFORM'] != 'win32':
	# Build a source tarball.
	Environment(TARFLAGS = '-c -z').Tar('librascal-' + version + '-src.tar.gz', fnd.listFiles(['.'], r'^(LICENSE|SConstruct|.*\.(cc|h|rc|docbook|dtd|css))$'))
